//! # D-Bus interface proxy for: `org.deepin.linglong.PackageManager1`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/deepin/linglong/PackageManager' from service 'org.deepin.linglong.PackageManager' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use std::collections::HashMap;

use zbus::proxy;
#[proxy(
    interface = "org.deepin.linglong.PackageManager1",
    default_service = "org.deepin.linglong.PackageManager",
    default_path = "/org/deepin/linglong/PackageManager"
)]
trait PackageManager1 {
    /// CancelTask method
    fn cancel_task(&self, task_id: &str) -> zbus::Result<()>;

    /// Install method
    fn install(
        &self,
        parameters: HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<HashMap<String, zbus::zvariant::OwnedValue>>;

    /// InstallFromFile method
    fn install_from_file(
        &self,
        fd: zbus::zvariant::Fd<'_>,
        file_type: &str,
    ) -> zbus::Result<HashMap<String, zbus::zvariant::OwnedValue>>;

    /// Search method
    fn search(
        &self,
        parameters: HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<HashMap<String, zbus::zvariant::OwnedValue>>;

    /// Uninstall method
    fn uninstall(
        &self,
        parameters: HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<HashMap<String, zbus::zvariant::OwnedValue>>;

    /// Update method
    fn update(
        &self,
        parameters: HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<HashMap<String, zbus::zvariant::OwnedValue>>;

    /// TaskChanged signal
    #[zbus(signal)]
    fn task_changed(
        &self,
        task_id: &str,
        percentage: &str,
        message: &str,
        status: i32,
    ) -> zbus::Result<()>;

    /// Configuration property
    #[zbus(property)]
    fn configuration(
        &self,
    ) -> zbus::Result<HashMap<String, zbus::zvariant::OwnedValue>>;
}
